/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ChatUser } from "./ChatUser";
import { ChatUserCountArgs } from "./ChatUserCountArgs";
import { ChatUserFindManyArgs } from "./ChatUserFindManyArgs";
import { ChatUserFindUniqueArgs } from "./ChatUserFindUniqueArgs";
import { DeleteChatUserArgs } from "./DeleteChatUserArgs";
import { ChatUserService } from "../chatUser.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => ChatUser)
export class ChatUserResolverBase {
  constructor(
    protected readonly service: ChatUserService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "ChatUser",
    action: "read",
    possession: "any",
  })
  async _chatUsersMeta(
    @graphql.Args() args: ChatUserCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [ChatUser])
  @nestAccessControl.UseRoles({
    resource: "ChatUser",
    action: "read",
    possession: "any",
  })
  async chatUsers(
    @graphql.Args() args: ChatUserFindManyArgs
  ): Promise<ChatUser[]> {
    return this.service.chatUsers(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => ChatUser, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "ChatUser",
    action: "read",
    possession: "own",
  })
  async chatUser(
    @graphql.Args() args: ChatUserFindUniqueArgs
  ): Promise<ChatUser | null> {
    const result = await this.service.chatUser(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => ChatUser)
  @nestAccessControl.UseRoles({
    resource: "ChatUser",
    action: "delete",
    possession: "any",
  })
  async deleteChatUser(
    @graphql.Args() args: DeleteChatUserArgs
  ): Promise<ChatUser | null> {
    try {
      return await this.service.deleteChatUser(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
