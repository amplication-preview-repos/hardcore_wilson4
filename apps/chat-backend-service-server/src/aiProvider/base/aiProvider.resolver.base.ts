/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AiProvider } from "./AiProvider";
import { AiProviderCountArgs } from "./AiProviderCountArgs";
import { AiProviderFindManyArgs } from "./AiProviderFindManyArgs";
import { AiProviderFindUniqueArgs } from "./AiProviderFindUniqueArgs";
import { CreateAiProviderArgs } from "./CreateAiProviderArgs";
import { UpdateAiProviderArgs } from "./UpdateAiProviderArgs";
import { DeleteAiProviderArgs } from "./DeleteAiProviderArgs";
import { CloudflareAiRequestDto } from "../CloudflareAiRequestDto";
import { OpenRouterRequestDto } from "../OpenRouterRequestDto";
import { AiProviderService } from "../aiProvider.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => AiProvider)
export class AiProviderResolverBase {
  constructor(
    protected readonly service: AiProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "read",
    possession: "any",
  })
  async _aiProvidersMeta(
    @graphql.Args() args: AiProviderCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [AiProvider])
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "read",
    possession: "any",
  })
  async aiProviders(
    @graphql.Args() args: AiProviderFindManyArgs
  ): Promise<AiProvider[]> {
    return this.service.aiProviders(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => AiProvider, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "read",
    possession: "own",
  })
  async aiProvider(
    @graphql.Args() args: AiProviderFindUniqueArgs
  ): Promise<AiProvider | null> {
    const result = await this.service.aiProvider(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiProvider)
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "create",
    possession: "any",
  })
  async createAiProvider(
    @graphql.Args() args: CreateAiProviderArgs
  ): Promise<AiProvider> {
    return await this.service.createAiProvider({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => AiProvider)
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "update",
    possession: "any",
  })
  async updateAiProvider(
    @graphql.Args() args: UpdateAiProviderArgs
  ): Promise<AiProvider | null> {
    try {
      return await this.service.updateAiProvider({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => AiProvider)
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "delete",
    possession: "any",
  })
  async deleteAiProvider(
    @graphql.Args() args: DeleteAiProviderArgs
  ): Promise<AiProvider | null> {
    try {
      return await this.service.deleteAiProvider(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => String)
  async IntegrateCloudflareAiGateway(
    @graphql.Args()
    args: CloudflareAiRequestDto
  ): Promise<string> {
    return this.service.IntegrateCloudflareAiGateway(args);
  }

  @graphql.Mutation(() => String)
  async IntegrateOpenRouter(
    @graphql.Args()
    args: OpenRouterRequestDto
  ): Promise<string> {
    return this.service.IntegrateOpenRouter(args);
  }
}
