/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, AiProvider as PrismaAiProvider } from "@prisma/client";

export class AiProviderServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.AiProviderCountArgs, "select">
  ): Promise<number> {
    return this.prisma.aiProvider.count(args);
  }

  async aiProviders(
    args: Prisma.AiProviderFindManyArgs
  ): Promise<PrismaAiProvider[]> {
    return this.prisma.aiProvider.findMany(args);
  }
  async aiProvider(
    args: Prisma.AiProviderFindUniqueArgs
  ): Promise<PrismaAiProvider | null> {
    return this.prisma.aiProvider.findUnique(args);
  }
  async createAiProvider(
    args: Prisma.AiProviderCreateArgs
  ): Promise<PrismaAiProvider> {
    return this.prisma.aiProvider.create(args);
  }
  async updateAiProvider(
    args: Prisma.AiProviderUpdateArgs
  ): Promise<PrismaAiProvider> {
    return this.prisma.aiProvider.update(args);
  }
  async deleteAiProvider(
    args: Prisma.AiProviderDeleteArgs
  ): Promise<PrismaAiProvider> {
    return this.prisma.aiProvider.delete(args);
  }
}
