/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { AiProviderService } from "../aiProvider.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AiProviderCreateInput } from "./AiProviderCreateInput";
import { AiProvider } from "./AiProvider";
import { AiProviderFindManyArgs } from "./AiProviderFindManyArgs";
import { AiProviderWhereUniqueInput } from "./AiProviderWhereUniqueInput";
import { AiProviderUpdateInput } from "./AiProviderUpdateInput";
import { CloudflareAiRequestDto } from "../CloudflareAiRequestDto";
import { OpenRouterRequestDto } from "../OpenRouterRequestDto";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class AiProviderControllerBase {
  constructor(
    protected readonly service: AiProviderService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: AiProvider })
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AiProviderCreateInput,
  })
  async createAiProvider(
    @common.Body() data: AiProviderCreateInput
  ): Promise<AiProvider> {
    return await this.service.createAiProvider({
      data: data,
      select: {
        apiKey: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [AiProvider] })
  @ApiNestedQuery(AiProviderFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async aiProviders(@common.Req() request: Request): Promise<AiProvider[]> {
    const args = plainToClass(AiProviderFindManyArgs, request.query);
    return this.service.aiProviders({
      ...args,
      select: {
        apiKey: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: AiProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async aiProvider(
    @common.Param() params: AiProviderWhereUniqueInput
  ): Promise<AiProvider | null> {
    const result = await this.service.aiProvider({
      where: params,
      select: {
        apiKey: true,
        createdAt: true,
        id: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: AiProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: AiProviderUpdateInput,
  })
  async updateAiProvider(
    @common.Param() params: AiProviderWhereUniqueInput,
    @common.Body() data: AiProviderUpdateInput
  ): Promise<AiProvider | null> {
    try {
      return await this.service.updateAiProvider({
        where: params,
        data: data,
        select: {
          apiKey: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: AiProvider })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "AiProvider",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteAiProvider(
    @common.Param() params: AiProviderWhereUniqueInput
  ): Promise<AiProvider | null> {
    try {
      return await this.service.deleteAiProvider({
        where: params,
        select: {
          apiKey: true,
          createdAt: true,
          id: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Post("/cloudflare-ai")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async IntegrateCloudflareAiGateway(
    @common.Body()
    body: CloudflareAiRequestDto
  ): Promise<string> {
    return this.service.IntegrateCloudflareAiGateway(body);
  }

  @common.Post("/openrouter")
  @swagger.ApiOkResponse({
    type: String,
  })
  @swagger.ApiNotFoundResponse({
    type: errors.NotFoundException,
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async IntegrateOpenRouter(
    @common.Body()
    body: OpenRouterRequestDto
  ): Promise<string> {
    return this.service.IntegrateOpenRouter(body);
  }
}
