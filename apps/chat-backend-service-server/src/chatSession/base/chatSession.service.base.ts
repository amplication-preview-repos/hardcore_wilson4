/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  ChatSession as PrismaChatSession,
  Message as PrismaMessage,
} from "@prisma/client";

export class ChatSessionServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ChatSessionCountArgs, "select">
  ): Promise<number> {
    return this.prisma.chatSession.count(args);
  }

  async chatSessions(
    args: Prisma.ChatSessionFindManyArgs
  ): Promise<PrismaChatSession[]> {
    return this.prisma.chatSession.findMany(args);
  }
  async chatSession(
    args: Prisma.ChatSessionFindUniqueArgs
  ): Promise<PrismaChatSession | null> {
    return this.prisma.chatSession.findUnique(args);
  }
  async createChatSession(
    args: Prisma.ChatSessionCreateArgs
  ): Promise<PrismaChatSession> {
    return this.prisma.chatSession.create(args);
  }
  async updateChatSession(
    args: Prisma.ChatSessionUpdateArgs
  ): Promise<PrismaChatSession> {
    return this.prisma.chatSession.update(args);
  }
  async deleteChatSession(
    args: Prisma.ChatSessionDeleteArgs
  ): Promise<PrismaChatSession> {
    return this.prisma.chatSession.delete(args);
  }

  async findMessages(
    parentId: string,
    args: Prisma.MessageFindManyArgs
  ): Promise<PrismaMessage[]> {
    return this.prisma.chatSession
      .findUniqueOrThrow({
        where: { id: parentId },
      })
      .messages(args);
  }
}
