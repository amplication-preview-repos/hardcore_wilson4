/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { ChatSessionService } from "../chatSession.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { ChatSessionCreateInput } from "./ChatSessionCreateInput";
import { ChatSession } from "./ChatSession";
import { ChatSessionFindManyArgs } from "./ChatSessionFindManyArgs";
import { ChatSessionWhereUniqueInput } from "./ChatSessionWhereUniqueInput";
import { ChatSessionUpdateInput } from "./ChatSessionUpdateInput";
import { MessageFindManyArgs } from "../../message/base/MessageFindManyArgs";
import { Message } from "../../message/base/Message";
import { MessageWhereUniqueInput } from "../../message/base/MessageWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class ChatSessionControllerBase {
  constructor(
    protected readonly service: ChatSessionService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: ChatSession })
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ChatSessionCreateInput,
  })
  async createChatSession(
    @common.Body() data: ChatSessionCreateInput
  ): Promise<ChatSession> {
    return await this.service.createChatSession({
      data: data,
      select: {
        chatUser: true,
        createdAt: true,
        endedAt: true,
        id: true,
        startedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [ChatSession] })
  @ApiNestedQuery(ChatSessionFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chatSessions(@common.Req() request: Request): Promise<ChatSession[]> {
    const args = plainToClass(ChatSessionFindManyArgs, request.query);
    return this.service.chatSessions({
      ...args,
      select: {
        chatUser: true,
        createdAt: true,
        endedAt: true,
        id: true,
        startedAt: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: ChatSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async chatSession(
    @common.Param() params: ChatSessionWhereUniqueInput
  ): Promise<ChatSession | null> {
    const result = await this.service.chatSession({
      where: params,
      select: {
        chatUser: true,
        createdAt: true,
        endedAt: true,
        id: true,
        startedAt: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: ChatSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  @swagger.ApiBody({
    type: ChatSessionUpdateInput,
  })
  async updateChatSession(
    @common.Param() params: ChatSessionWhereUniqueInput,
    @common.Body() data: ChatSessionUpdateInput
  ): Promise<ChatSession | null> {
    try {
      return await this.service.updateChatSession({
        where: params,
        data: data,
        select: {
          chatUser: true,
          createdAt: true,
          endedAt: true,
          id: true,
          startedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: ChatSession })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteChatSession(
    @common.Param() params: ChatSessionWhereUniqueInput
  ): Promise<ChatSession | null> {
    try {
      return await this.service.deleteChatSession({
        where: params,
        select: {
          chatUser: true,
          createdAt: true,
          endedAt: true,
          id: true,
          startedAt: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/messages")
  @ApiNestedQuery(MessageFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Message",
    action: "read",
    possession: "any",
  })
  async findMessages(
    @common.Req() request: Request,
    @common.Param() params: ChatSessionWhereUniqueInput
  ): Promise<Message[]> {
    const query = plainToClass(MessageFindManyArgs, request.query);
    const results = await this.service.findMessages(params.id, {
      ...query,
      select: {
        chatSession: {
          select: {
            id: true,
          },
        },

        content: true,
        createdAt: true,
        id: true,
        timestamp: true,
        updatedAt: true,
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "update",
    possession: "any",
  })
  async connectMessages(
    @common.Param() params: ChatSessionWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        connect: body,
      },
    };
    await this.service.updateChatSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "update",
    possession: "any",
  })
  async updateMessages(
    @common.Param() params: ChatSessionWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        set: body,
      },
    };
    await this.service.updateChatSession({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/messages")
  @nestAccessControl.UseRoles({
    resource: "ChatSession",
    action: "update",
    possession: "any",
  })
  async disconnectMessages(
    @common.Param() params: ChatSessionWhereUniqueInput,
    @common.Body() body: MessageWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      messages: {
        disconnect: body,
      },
    };
    await this.service.updateChatSession({
      where: params,
      data,
      select: { id: true },
    });
  }
}
